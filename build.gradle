

plugins {
  id 'idea'
  id 'jacoco'
  id 'java-library'
  id 'net.researchgate.release' version '2.6.0'
}

group = "${groupId}"
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
  api('ch.qos.logback:logback-core:1.2.3')
  api('com.auth0:java-jwt:3.3.0')
  api('com.google.code.gson:gson:2.8.2')
  api('com.google.guava:guava:24.1-jre')
  api('commons-lang:commons-lang:2.6')
  api('org.slf4j:slf4j-api:1.7.25')
  implementation('org.projectlombok:lombok:1.16.18')
  implementation('org.springframework.boot:spring-boot-starter-actuator:1.5.9.RELEASE')
  testImplementation('com.openpojo:openpojo:0.8.6')
  testImplementation('nl.jqno.equalsverifier:equalsverifier:2.3.3')
  testImplementation('junit:junit:4.12')
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
}

jar {
  from sourceSets.main.allSource
  manifest {
    attributes(
        "Implementation-Title": "${groupId}.${artifactId}",
        "Implementation-Version": "${version}",
        "Implementation-Vendor": "${vendorName}",
        "Specification-Title": "${specificationTitle}",
        "Source-Compatibility": project.sourceCompatibility,
        "Target-Compatibility": project.targetCompatibility,
        "Built-JDK": System.getProperty('java.version'),
        "Build-Date": (new Date()).format('yyyy-MM-dd.HH:mm')
    )
  }
}

test {
  jacoco {
    append = false
    destinationFile = file("${buildDir}/jacoco/jacocoTest.exec")
    classDumpDir = file("${buildDir}/jacoco/classpathdumps")
  }
}

// Exclude classes that should not be included in unit testing coverage
jacocoTestReport {
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [

      ])
    })
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.0.2'
}
